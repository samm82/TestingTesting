Name | Definition | Synonym(s) | Note(s)
Assertion | A "logical expression specifying a program state that must exist or a set of conditions that program variables must satisfy at a particular point during program execution" (IEEE, 2017, p. 30) | Invariant, sometimes (IEEE, 2017, p. 257) | "Types include input assertion, loop assertion, output assertion" (IEEE, 2017, p. 30)
Branch | "A transfer of control to an entry point of the test item" or "from any node to any other node in the control flow model" (IEEE, 2021c, p. 23) that may involve "a set[] of program statements … [being] selected for execution" (2017, p. 51) | Arc (implied by IEEE, 2021c, p. 24; Kam, 2008, p. 42), Link, Edge (implied by IEEE, 2021c, p. 24), Decision Point (implied by 2017, p. 51) | 
Call Graph | A "diagram that identifies the modules in a system or computer program and shows which modules call one another" (IEEE, 2017, p. 56) | Call Tree, Tier Chart (IEEE, 2017, p. 56) | 
Cause-Effect Graph | A "logical network[] that map[s] a set of causes to a set of effects by systematically exploring the possible combinations of input conditions" (Washizaki, 2024, p. 5-11; similar in Hamburg and Mogyorodi, 2024) and "can optionally model syntactic and semantic constraints over [these] relationships" (IEEE, 2021c, p. 19) |  | 
CFG (Doğan et al., 2014, Tab. 13; OG Liu and Kuan Tan, 2008) |  |  | 
Classification Tree | "A tree diagram representing test data domains of a test object" (Hamburg and Mogyorodi, 2024) as "a decomposition hierarchy" (IEEE, 2017, p. 485; OG PMBOK) using "distinct classifications (relevant test aspects) and classes (input values)" (IEEE, 2022, p. 3; 2021c, p. 2) |  | 
Commercial Off-the-Shelf | "A type of product developed in an identical format for a large number of customers in the general market" (Hamburg and Mogyorodi, 2024) | Off-the-Shelf Software (Hamburg and Mogyorodi, 2024) | 
Common Gateway Interface | An "object[] that execute[s] on the server … initiated by [a] forms-based user interaction[] on the browser" (Gerrard, 2000b, p. 13) | CGI (Gerrard, 2000a, p. 17; 2000b, p. 11) | "The most common mechanism used to implement functionality on web sites" (Gerrard, 2000b, p. 11), including business logic, order or payment processing, and security checking (p. 13)
(Software) Component | A discrete entity, either structurally (IEEE, 2017, p. 419; OG ISO/IEC, 2015), functionally, or logically (IEEE, 2017, p. 419), "within a system considered at a particular level of analysis" (ISO/IEC, 2023b; IEEE, 2017, p. 419; OG ISO/IEC, 2015) "that can be implemented to fulfill specified requirements" (IEEE, 2015, p. 9) and "can be tested in isolation" (Hamburg and Mogyorodi, 2024); "the individual subprograms or components, a subsystem, or a composition of … components" (Washizaki, 2024, p. 5-6) or even an entire system (IEEE, 2017, p. 419; OG ISO/IEC, 2016) | System Element (IEEE, 2015, p. 9, Fig. 1), Module, Unit (Hamburg and Mogyorodi, 2024; often in IEEE, 2017, p. 82) | "The terms module, component, and unit [sic] are often used interchangeably or defined to be subelements of one another in different ways depending upon the context" with no standardized relationship (IEEE, 2017, p. 82); for example, "components differ from classical modules for being re-used in different contexts independently of their development" (Baresi and Pezzè, 2006, p. 107). It seems like this could apply to the testing of both modules and specific functions
Composite Keyword | A "keyword[] … constructed based on other keywords" (IEEE, 2016, p. 3) |  | 
Computation Data Use | A "use of the value of a variable in any type of statement" (IEEE, 2021c, p. 2; 2017, p. 83; OG 2015), "as an input to the computation of the definition of any variable or of an output" (2021c, p. 27; similar in van Vliet, 2000, p. 424), or not as a P-use (p. 424; implied by IEEE, 2021c, p. 27); e.g., the use of a variable in a computation or I/O statement (van Vliet, 2000, p. 424) | c-use (IEEE, 2021c, pp. 2-3, 27-29, 35-36, 114-118, 129; 2017, pp. 92, 124; Peters and Pedrycz, 2000, p. 477, Tab. 12.6), computation-use (IEEE, 2021c, pp. 27, 113), C-use (van Vliet, 2000, pp. 424-425), Computational Use (p. 425) | 
Condition | A "Boolean expression containing no Boolean operators" (IEEE, 2021c, p. 2; similar in Hamburg and Mogyorodi, 2024) | Atomic Condition (Hamburg and Mogyorodi, 2024) | 
Constituent System | An "independent system that forms part of a system of systems" and "is a useful system by itself, having its own development, management, utilization, goals, and resources" (IEEE, 2019b, p. 2; OG ISO/IEC/IEEE 21839) | CS (IEEE, 2019b, p. 3) | 
Control Graph | A representation of a program where "nodes denote actions", "(directed) edges [or "arcs" (Peters and Pedrycz, 2000, Tab. 12.2)] connect actions with subsequent actions (in time)", "cycles correspond to loops", and "a path is a sequence of nodes connected by edges" (van Vliet, 2000, pp. 420-421; similar in Peters and Pedrycz, 2000, Tab. 12.2) | Control Flow Graph (implied by Peters and Pedrycz, 2000, Tab. 12.2) | Multiple actions that occur one after another may be collapsed into a single node (van Vliet, 2000, p. 421)
Cyclomatic Complexity Metric | A "criterion … based on the control graph representation of a program" (van Vliet, 2000, p. 422; OG McC76) that ensures that requires that "all linearly-independent paths are covered" (van Vliet, 2000, p. 423) |  | Ensures complete branch coverage
Data Analysis | The "systematic investigation of the data and their flow in a real or planned system" (IEEE, 2017, p. 114) |  | 
Data Definition | A "statement where a variable is assigned a value" (IEEE, 2021c, p. 3; 2017, p. 115; OG 2015; similar in 2012, p. 27; van Vliet, 2000, p. 424), "possibly … the same value as it had before" (2021c, p. 27), that is also "a valid state" (Peters and Pedrycz, 2000, p. 478) | Variable Definition (IEEE, 2021c, p. 3; implied by van Vliet, 2000, p. 424) | 
Data Flow Graph | A "directed, labeled graph[] corresponding to a data flow relation" that can be "annotated with information about variable definitions and references" (Peters and Pedrycz, 2000, Tab. 12.2) |  | 
Decision | A "point[] in the test item where two or more possible outcomes (and hence sub-paths) may be taken by the control flow" (IEEE, 2021c, p. 24; OG BS 7925-2; OG Myers 1979) |  | "Typical[ly] … used for simple selections (e.g. if-then-else …), to decide when to exit loops (e.g. while-loop …) and in case (switch) statements (e.g. case-1-2-3-…-N …)" (IEEE, 2021c, p. 24; OG BS 7925-2; OG Myers 1979)
Decision Table | A "tabular representation of decision rules [or logical relationships (IEEE, 2021c, p. 18)] between causes and effects" (2022, p. 3) or of "sets of conditions and the actions resulting from them" (2017, p. 123; similar in 2021c; p. 18) |  | 
Defect | "An imperfection or deficiency in a project component where that component does not meet its requirements or specifications and needs to be either repaired or replaced" (IEEE, 2010, p. 96) | Fault (can be), Failure (can be) (IEEE, 2017, p. 124; 2010, p. 96; OG 2005; Bourque and Fairley, 2014, p. 4-3; OG IEEE, 1996), Bug (Washizaki, 2024, p. 1-1; Patton, 2006, pp. 13-14) | May be used as a "generic term that can refer to either a fault (cause) or a failure (effect)" (IEEE, 2017, p. 124; 2010, p. 96; OG 2005) "when the distinction is not important" (Bourque and Fairley, 2014, p. 4-3; OG IEEE, 1996)
Definition-Clear Path | A path from a variable's definition to a statement with no reassignment between the two (van Vliet, 2000, p. 424) | Definition-Use Path? | 
(Data) Definition-Use Pair | A "data definition and subsequent predicate or computational data use, where the data use uses the value defined in the data definition" (IEEE, 2021c, p. 3; 2017, pp. 115, 125; OG 2015; similar in Hamburg and Mogyorodi, 2024) and "there has been no intervening redefinition of the variable's value" (2021c, p. 27; OG Burnstein, 2003) |  | "C-use, p-use, and all-use are all more specialized categories of data flow coverage criteria" because they put an "emphasis" on these and the "distribution[s] of th[ese] pair[s] across the code" (Peters and Pedrycz, 2000, p. 477)
Definition-Use Path | A path between a "data definition and subsequent predicate or computational data use, where the data use uses the value defined in the data definition" (IEEE, 2017, p. 125; OG 2015; similar in Peters and Pedrycz, 2000, pp. 478-479) | Du-Path (lowercase) (IEEE, 2021c, pp. 3, 27, 29, 35, 119-121, 129; Peters and Pedrycz, 2000, pp. 478-479), DU-Path (van Vliet, 2000, p. 425), Definition-Clear Path? | 
Document Object Model (DOM) (Bajammal and Mesbah, 2018, p. 193) | "A cross-platform and language-independent convention for representing and interacting with objects in HTML, XHTML and XML documents" (Doğan et al., 2014, p. 179) |  | 
(Test) Driver | A "software module used to invoke a module under test and, often, provide test inputs, control and monitor execution, and report test results" (IEEE, 2017, p. 468; similar in Patton, 2006, p. 109); may also be used to "simulate the environment … [of] the module being tested" (van Vliet, 2000, p. 438) |  | 
Equivalence Partition | A "subset of the range of values of a variable, or set of variables, within a test item or at its interfaces" (IEEE, 2013, p. 3) such as its inputs and outputs (2021c, p. 11) "that are expected to be treated similarly by the test item" (2022, p. 4; 2021c, p. 4; similar on p. 10) | Equivalence Class (IEEE, 2022, p. 4; 2021c, p. 4) | An "equivalence partition[] … can overlap … [or] be a subset of another" (IEEE, 2021c, p. 11)
Error | "A human action that produces an incorrect result" (IEEE, 2010, p. 128; van Vliet, 2000, p. 399); "the difference between a computed, observed, or measured value or condition and the true, specified, or theoretically correct value or condition" (IEEE, 2010, p. 128; similar in Washizaki, 2024, pp. 17-18 to 17-19, 18-7 to 18-8) | Human Error (Washizaki, 2024, p. 12-3), Bug (Patton, 2006, pp. 13-14) | Can be caused by a user (Washizaki, 2024, pp. 4-7, 5-9 to 5-10) or developer (IEEE, 2010, p. 128; Washizaki, 2024, pp. 5-12, 7-14, 12-3; van Vliet, 2000, pp. 399-400)
Error Taxonomy |  |  | Can support experience-based testing (IEEE, 2022, p. 4; 2021c, p. 4)
Extended Entry (Decision) Table | A decision table where the "conditions consist of multiple values rather than simple Booleans" (IEEE, 2021c, p. 18) or "the conditions and actions are generally described but are incomplete" (2017, p. 175; OG ISO, 1984) |  | 
Failure | The inability of a system "to perform a required function or … within previously specified limits" (IEEE, 2019a, p. 7; 2010, p. 139; OG ISO/IEC, 2005; similar in van Vliet, 2000, p. 400) that is "externally visible" (IEEE, 2019a, p. 7; similar in van Vliet, 2000, p. 400) and caused by a fault (Washizaki, 2024, p. 12-3; van Vliet, 2000, p. 400; may be in IEEE, 2010, p. 139) | Defect (can be) (IEEE, 2017, p. 124; 2010, p. 96; OG 2005; Bourque and Fairley, 2014, p. 4-3; OG IEEE, 1996), Bug (Patton, 2006, pp. 13-14), Malfunction (implied by Washizaki, 2024, p. 503; Patton, 2006, p. 11) | Not easy to define precisely and uniquely as it is "a relative notion" (van Vliet, 2000, p. 400)
Fault | "An incorrect step, process, or data definition in a computer program" (IEEE, 2010, p. 140) inserted when a developer makes an error (pp. 128, 140; Washizaki, 2024, p. 12-3; van Vliet, 2000, pp. 399-400) | Bug (IEEE, 2017, p. 179; 2010, p. 140; Patton, 2006, pp. 13-14), Defect (although this seems to focus on hardware; p. 140) (Washizaki, 2024, p. 12-3; can be in IEEE, 2017, p. 124; 2010, p. 96; OG 2005; Bourque and Fairley, 2014, p. 4-3; OG IEEE, 1996; implied by 2010, p. 96; OG ISO/IEC, 2003), Domain Error (although this may only apply in certain cases) (Washizaki, 2024, p. 5-11) | "Overloaded with too many meanings, as engineers and others use the word to refer to all different types of anomalies" (Washizaki, 2024, p. 12-3) 
Fault Masking (IEEE, 2021c, p. 10) |  |  | 
Framework | "A combination of components … that simplifies the construction of applications and that can be plugged into an application" (Peters and Pedrycz, 2000, p. 3) |  | 
Functional Unit | An "entity … capable of accomplishing a specified purpose" (IEEE, 2017, p. 196) that is "logically separable" (p. 489) and "not subdivided" (p. 489; OG ISO/IEC, 2012) |  | 
(Test) Harness | "Scaffolding code written for the purpose of exercising lower level code when the higher-level code that will ultimately exercise it is not yet available" (IEEE, 2017, p. 469); "a collection of stubs and drivers needed to execute a test suite" (Hamburg and Mogyorodi, 2024) |  | 
High-level Keyword | A "keyword that covers complex activities that may be composed from other keywords and is used by domain experts" (IEEE, 2016, p. 3); "a meaningful name is used to identify the keyword", and it "may require a set of input parameters" (p. 4) |  | 
Infeasible Path | A "control flow path[] that cannot be exercised by any input data" (Washizaki, 2024, p. 5-5) |  | 
Invariant | An "assertion that is always true for a specified segment or at a specified point of a computer program" (IEEE, 2017, p. 240) | Assertion, sometimes (IEEE, 2017, p. 257) | 
Keyword | "One or more words [including "at least one verb"] used as a reference to a specific set of actions intended to be performed during" testing (IEEE, 2022, p. 5; 2016, p. 3); should be unambiguous and "comprehensive enough so that most, if not all, required test cases can be entirely composed of these keywords" (p. 4) | Action Word (implied by IEEE, 2016, p. 6; Hamburg and Mogyorodi, 2024) | 
Low-level Keyword | A "keyword that covers only one or very few simple actions and is not composed from other keywords" (IEEE, 2016, p. 3) |  | 
Markov Chain | "A discrete-time stochastic process model with a memoryless property" meaning that a given state transition "is not related to the history of transitions" (Kam, 2008, p. 21) |  | 
Metamorphic Relation | A "description of how changes to the test inputs for a test case affect the expected outputs" (IEEE, 2022, p. 6; 2021c, p. 4; similar on pp. 21-22 and in Hamburg and Mogyorodi, 2024; Kanewala and Yueh Chen, 2019, p. 67) | MR (Kanewala and Yueh Chen, 2019, p. 67) | "Will not always … [provide] an exact value" for "the expected result for the follow-up test case", and "can often be used to derive multiple follow-up test cases" (IEEE, 2021c, p. 22). Should be "reviewed and agreed by [sic] relevant stakeholders, such as business users" (p. 22). May be uncovered using regression analysis? See ISO 29119-11
Minimization | The process of "reduc[ing] the number of test cases required to cover valid test coverage items" (IEEE, 2021c, p. 10) |  | 
Mixed Entry Table | A "decision table whose stub consists of rows in which limited and extended entries are written" (IEEE, 2017, p. 278; OG ISO, 1984) |  | 
Multiple-hit Decision Table | A "decision table where at least one set of conditions will be satisfied by more than one rule" (IEEE, 2017, p. 285; OG ISO, 1984) |  | 
Operational Profile | "An actual or predicted pattern of use of the component or system" (Hamburg and Mogyorodi, 2024) |  | 
(Test) Oracle | A "source of information for determining whether a test has passed or failed" (IEEE, 2022, p. 13) |  | 
Parameter-Value Pair | The "combination of a test item parameter with a value assigned to that parameter" (IEEE, 2022, p. 7; 2021c, p. 5; 2017, p. 311; OG 2015) | P-V Pair (IEEE, 2022, p. 7; 2021c, pp. 5, 15; used in Hamburg and Mogyorodi, 2024) | "Used as a test condition and coverage item in combinatorial test design techniques" (IEEE, 2022, p. 7; 2021c, p. 5; 2017, p. 311; OG 2015)
Path | "A sequence of [consecutive (Hamburg and Mogyorodi, 2024)] instructions that are performed in the execution of a computer program" (IEEE, 2017, p. 316; similar in van Vliet, 2000, p. 420) or test item (IEEE, 2021c, p. 5; 2017, p. 316; OG IEEE 2015) | Control Flow Path (Hamburg and Mogyorodi, 2024; implied by Washizaki, 2024, p. 5-13); Control Flow Sub-Path (implied by IEEE, 2017, pp. 101, 316; OG 2015; Hamburg and Mogyorodi, 2024; Washizaki, 2024, p. 5-13) | 
Path Analysis | The "analysis of a computer program to identify all possible paths through the program, to detect incomplete paths, or to discover portions of the program that are not on any path" (IEEE, 2017, p. 316) |  | 
Predicate | A "logical expression which evaluates to TRUE or FALSE to direct the execution path in code" (IEEE, 2021c, p. 5; similar in 2017, p. 331; OG 2015) |  | 
Predicate Data Use | A "data use associated with the decision outcome of the predicate portion of a decision statement" (IEEE, 2021c, p. 5; 2017, p. 332; OG 2015; similar in 2021c, p. 27); e.g., the use of a variable in a conditional (van Vliet, 2000, p. 424) like "a while-loop or if-then-else" (IEEE, 2021c, p. 27) | p-use (IEEE, 2021c, pp. 3, 5, 27-29, 35-36, 113-115, 117-118, 129; 2017, pp. 124, 341; Peters and Pedrycz, 2000, p. 477, Tab. 12.6), predicate-use (IEEE, 2021c, pp. 27, 113), P-use, Predicate Use (van Vliet, 2000, pp. 424-425) | 
Probe | "A statement inserted into a program" for the purpose of dynamic analysis; may be "a simple output statement" or one that "can make calls to analysis routines" (Peters and Pedrycz, 2000, p. 438) |  | 
Regression Analysis | "An analytic technique where a series of input variables are examined in relation to their corresponding output results in order to develop a mathematical or statistical relationship" (IEEE, 2017, p. 372) |  | 
Requirement | A "condition or capability that must be met or possessed by a system … to satisfy an agreement, standard, specification, or other formally imposed documents [sic]" (IEEE, 2017, p. 380; OG 2014) or a "statement that translates or expresses a need and its associated constraints and conditions" (2015, p. 8; OG 2011) |  | 
Requirements Analysis | The "process of studying and refining system, hardware, or software requirements" (IEEE, 2017, p. 381) |  | 
Risk Analysis | "The process of finding, recognizing and describing risks" (Hamburg and Mogyorodi, 2024), including "examining … [them] for probability of occurrence, potential loss, and potential risk-handling strategies" (IEEE, 2017, p. 390) |  | Hamburg and Mogyorodi (2024) break this down into "identification" and "assessment". See ISO 31000
Separation Logic Specification | The specification of "dynamically-allocated linked data structures" that only "concentrates on the resources relevant to its correct operation" (Berdine et al., 2006, p. 115) | Assertion (Lahiri et al., 2013, p. 345), Specification, with context (Berdine et al., 2006; likely Chalin et al., 2006) | 
Simple Cycle | A cycle with distinct inner nodes that is not at the beginning or end of a path (van Vliet, 2000, p. 421) |  | 
Single-hit Decision Table | A "decision table where any set of conditions will be satisfied by one, and only one, rule" (IEEE, 2017, p. 415; OG ISO, 1984) |  | 
Software Interface | "A program that makes it possible for components to interact and interoperate with each other" (Peters and Pedrycz, 2000, p. 3) |  | 
Software Life Cycle Process (SLCP) (IEEE, 2017, p. 416) |  |  | 
Source Test Case | A test case that passes and is "used as the basis of follow-up test cases" in metamorphic testing (Hamburg and Mogyorodi, 2024) |  | 
State (Transition) Diagram | A diagram that maps out the logic flow from the user's perspective by showing every possible unique state, the conditions that take the program between states, and the conditions and outputs when a state is entered or exited (Patton, 2006, p. 81-82) |  | 
State Transition | A "change from one state to another … or the same state" (IEEE, 2017, p. 484; OG ISO/IEC, 1995) |  | "An individual transition may be constrained by an event guard" (IEEE, 2021c, p. 19)
Statechart |  |  | 
(Test) Stub | A "skeletal or special-purpose implementation of a software module, used to develop or test a module that calls or is otherwise dependent on it" (IEEE, 2017, p. 444) by providing "fake" values to the module being tested (Patton, 2006, p. 110); may be used when the original module is "not yet available" (van Vliet, 2000, p. 410) |  | 
Sub-path | A "path that is part of a larger path" (IEEE, 2021c, p. 5; 2017, p. 444; OG 2015) | Control Flow Sub-Path (inferred from IEEE, 2017, p. 101; OG 2015; Hamburg and Mogyorodi, 2024; Washizaki, 2024, p. 5-13) | 
System | A "combination of interacting elements organized to achieve one or more stated purposes" (IEEE, 2015, p. 9) that includes "hardware, software, firmware, people, information, techniques, facilities, services, and other support elements" (Washizaki, 2024, p. 1-5; OG INCOSE; similar in IEEE, 2015, p. 9; Firesmith, 2015, pp. 21-23 also implies that hardware, software, and system testing are distinct) |  | Only the software component of "system" is in scope of this research; sometimes this is explicit in its definition (Sakamoto et al., 2013, pp. 343-344) or done in cases where "the software is itself the system of interest, and hardware and support system are regarded as the platform or infrastructure" (Washizaki, 2024, p. 1-5)
System(s) of Systems | At least one "set of systems and system elements that interact to provide a unique capability that none of the constituent systems can accomplish on its own" (IEEE, 2019b, p. 3; OG ISO/IEC/IEEE 21839) | SoS (IEEE, 2019b, p. 3; 2015, p. 11) | 
Template Variable | A "variable[ or] expression[] for embedding in [an] HTML template[]" (Sakamoto et al., 2013, p. 344) |  | 
Test Case | "A set of preconditions, inputs (including actions, where applicable), and expected results [from a test oracle (Sakamoto et al., 2013, p. 344)], [sic] developed to determine whether or not the covered part of the test item has been implemented correctly" (IEEE, 2021c, p. vii) |  | 
Test Code | "An executable program including test cases" (Sakamoto et al., 2013, p. 344) |  | 
Test Coverage Items | "Attributes of the test model that can be covered during testing" (IEEE, 2021c, p. vii) |  | 
Test Execution Engine | A "tool implemented in software and sometimes in hardware that can manipulate the test item to execute test cases" (IEEE, 2016, p. 3) |  | 
Test(ing) Framework | An "environment that facilitates testing" (IEEE, 2016, p. 4), potentially "by writing test code" (Sakamoto et al., 2013, p. 344) |  | Examples: JUnit (Sakamoto et al., 2013, p. 344), COBRA (Preuße et al., 2012, p. 2)
Test Hook | A "customized software interface that enables automated testing of a test object" (Hamburg and Mogyorodi, 2024) |  | 
Test Interface | An "interface to the test item used to stimulate the test item, to get responses (e.g. actual results), or both", including "GUI, API … [and] SOA interfaces" (IEEE, 2016, p. 4) |  | 
Test Item | A "work product to be tested" (IEEE, 2022, p. 12; 2021c, p. 6) | Test Object (IEEE, 2022, p. 12; 2021c, p. 6), System Under Test (SUT) (get source(s)), Object Under Test (OUT) (Firesmith, 2015, p. 11), Implementation Under Test (IUT) (Jard et al., 1999, p. 26) | 
Test Model | A representation of the "testable aspects of a test item, such as a function, transaction, feature, quality attribute, or structural element identified as a basis for testing" that "reflects the required test completion criterion" (IEEE, 2021c, p. vii) and "test coverage items" (pp. 9-10) and "allows the testing to be focused on particular characteristics or qualities" (p. 6) |  | Is "typically … the basis for several test coverage items" (IEEE, 2021c, p. vii)
Test Oracle | "Determines whether the program works as expected by observing the program state" (Sakamoto et al., 2013, p. 344) |  | 
Test Script | A "test procedure specification for manual or automated testing" (IEEE, 2017, p. 472; OG 2013) or "sequence of instructions for the execution of a test" (Hamburg and Mogyorodi, 2024) | Test Scenario? (Sakamoto et al., 2013, p. 344) | 
Unified Model Language (UML) (Kam, 2008, p. 11) | "A de facto standard modeling language that models the system, validates the user requirements … and is widely accepted by industry" (Kam, 2008, p. 12) |  | 
(Software) Unit | An "atomic-level software component of the software architecture that can be subjected to stand-alone testing" (IEEE, 2017, p. 428; OG ISO/IEC, 2016; Washizaki, 2024, p. 10-3; similar in Hamburg and Mogyorodi, 2024; Peters and Pedrycz, 2000, p. 3) that is useful on its own (IEEE, 2017, p. 428; OG ISO/IEC, 2008; p. 489; OG ISO/IEC, 2012; Peters and Pedrycz, 2000, p. 3) and has a special purpose (p. 3) | Component (Hamburg and Mogyorodi, 2024; often in IEEE, 2017, p. 82), Module (Hamburg and Mogyorodi, 2024; Peters and Pedrycz, 2000, p. 3; often in IEEE, 2017, p. 82), Componentware (CW) (Peters and Pedrycz, 2000, p. 3) | "The terms module, component, and unit [sic] are often used interchangeably or defined to be subelements of one another in different ways depending upon the context" with no standardized relationship (IEEE, 2017, p. 82). The reuse of components can contribute to "increased software productivity and quality" (Peters and Pedrycz, 2000, p. 3)
(Data) Use | An "executable statement where the value of a variable is accessed" (IEEE, 2021c, p. 3; 2017, p. 120; OG 2015) and "used either for computing … or in a predicate" (Peters and Pedrycz, 2000, p. 480), or "an occurrence of a variable in which the variable is not given a new value" (2021c, p. 27) |  | 